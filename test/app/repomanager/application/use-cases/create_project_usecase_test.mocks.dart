// Mocks generated by Mockito 5.4.4 from annotations
// in repomanager/test/app/repomanager/application/use-cases/create_project_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:io' as _i6;

import 'package:mockito/mockito.dart' as _i1;
import 'package:repomanager/app/repomanager/domain/entities/project_entity.dart'
    as _i5;
import 'package:repomanager/app/repomanager/domain/repository/project_repository.dart'
    as _i3;
import 'package:repomanager/app/repomanager/shared/either/either.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IProjectRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIProjectRepository extends _i1.Mock
    implements _i3.IProjectRepository {
  @override
  _i4.Future<_i2.Either<void, List<_i5.ProjectEntity>>> getProjects() =>
      (super.noSuchMethod(
        Invocation.method(
          #getProjects,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<void, List<_i5.ProjectEntity>>>.value(
                _FakeEither_0<void, List<_i5.ProjectEntity>>(
          this,
          Invocation.method(
            #getProjects,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<void, List<_i5.ProjectEntity>>>.value(
                _FakeEither_0<void, List<_i5.ProjectEntity>>(
          this,
          Invocation.method(
            #getProjects,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<void, List<_i5.ProjectEntity>>>);

  @override
  _i4.Future<_i2.Either<void, List<_i5.ProjectEntity>>> getProjectsByWorkspace(
          _i6.Directory? workspacePath) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProjectsByWorkspace,
          [workspacePath],
        ),
        returnValue:
            _i4.Future<_i2.Either<void, List<_i5.ProjectEntity>>>.value(
                _FakeEither_0<void, List<_i5.ProjectEntity>>(
          this,
          Invocation.method(
            #getProjectsByWorkspace,
            [workspacePath],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<void, List<_i5.ProjectEntity>>>.value(
                _FakeEither_0<void, List<_i5.ProjectEntity>>(
          this,
          Invocation.method(
            #getProjectsByWorkspace,
            [workspacePath],
          ),
        )),
      ) as _i4.Future<_i2.Either<void, List<_i5.ProjectEntity>>>);

  @override
  _i4.Future<_i2.Either<void, _i5.ProjectEntity?>> getProject(
          _i6.Directory? path) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProject,
          [path],
        ),
        returnValue: _i4.Future<_i2.Either<void, _i5.ProjectEntity?>>.value(
            _FakeEither_0<void, _i5.ProjectEntity?>(
          this,
          Invocation.method(
            #getProject,
            [path],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<void, _i5.ProjectEntity?>>.value(
                _FakeEither_0<void, _i5.ProjectEntity?>(
          this,
          Invocation.method(
            #getProject,
            [path],
          ),
        )),
      ) as _i4.Future<_i2.Either<void, _i5.ProjectEntity?>>);

  @override
  _i4.Future<_i2.Either<void, _i5.ProjectEntity>> createProject(
          _i5.ProjectEntity? project) =>
      (super.noSuchMethod(
        Invocation.method(
          #createProject,
          [project],
        ),
        returnValue: _i4.Future<_i2.Either<void, _i5.ProjectEntity>>.value(
            _FakeEither_0<void, _i5.ProjectEntity>(
          this,
          Invocation.method(
            #createProject,
            [project],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<void, _i5.ProjectEntity>>.value(
                _FakeEither_0<void, _i5.ProjectEntity>(
          this,
          Invocation.method(
            #createProject,
            [project],
          ),
        )),
      ) as _i4.Future<_i2.Either<void, _i5.ProjectEntity>>);

  @override
  _i4.Future<_i2.Either<void, _i5.ProjectEntity>> updateProject(
          _i5.ProjectEntity? project) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateProject,
          [project],
        ),
        returnValue: _i4.Future<_i2.Either<void, _i5.ProjectEntity>>.value(
            _FakeEither_0<void, _i5.ProjectEntity>(
          this,
          Invocation.method(
            #updateProject,
            [project],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<void, _i5.ProjectEntity>>.value(
                _FakeEither_0<void, _i5.ProjectEntity>(
          this,
          Invocation.method(
            #updateProject,
            [project],
          ),
        )),
      ) as _i4.Future<_i2.Either<void, _i5.ProjectEntity>>);

  @override
  _i4.Future<_i2.Either<void, void>> deleteProject(
    _i6.Directory? path,
    _i6.Directory? workspacePath,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteProject,
          [
            path,
            workspacePath,
          ],
        ),
        returnValue:
            _i4.Future<_i2.Either<void, void>>.value(_FakeEither_0<void, void>(
          this,
          Invocation.method(
            #deleteProject,
            [
              path,
              workspacePath,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<void, void>>.value(_FakeEither_0<void, void>(
          this,
          Invocation.method(
            #deleteProject,
            [
              path,
              workspacePath,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<void, void>>);
}
